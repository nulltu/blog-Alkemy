[{"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\index.js":"1","C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\pages\\Home.js":"2","C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\pages\\NewPost.js":"3","C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\pages\\EditPost.js":"4","C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\navBar\\NavBar.js":"5","C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\FormPost\\FormNewPost.js":"6","C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\listPosts\\ListPosts.js":"7","C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\App\\App.js":"8","C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\Modal\\Modal.js":"9","C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\Post\\Post.js":"10","C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\post\\Post.js":"11","C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\formEditPost\\formEditPost.js":"12"},{"size":224,"mtime":1608365091821,"results":"13","hashOfConfig":"14"},{"size":208,"mtime":1608364810390,"results":"15","hashOfConfig":"14"},{"size":224,"mtime":1608372402728,"results":"16","hashOfConfig":"14"},{"size":274,"mtime":1608366319080,"results":"17","hashOfConfig":"14"},{"size":476,"mtime":1608370626713,"results":"18","hashOfConfig":"14"},{"size":3118,"mtime":1608375168478,"results":"19","hashOfConfig":"14"},{"size":2061,"mtime":1608365340877,"results":"20","hashOfConfig":"14"},{"size":642,"mtime":1608372348142,"results":"21","hashOfConfig":"14"},{"size":2924,"mtime":1608369841770,"results":"22","hashOfConfig":"14"},{"size":1348,"mtime":1608365526307,"results":"23","hashOfConfig":"14"},{"size":1916,"mtime":1608375070991,"results":"24","hashOfConfig":"14"},{"size":4291,"mtime":1608368721662,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"ncw8o8",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\index.js",[],["52","53"],"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\pages\\Home.js",[],"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\pages\\NewPost.js",[],"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\pages\\EditPost.js",[],"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\navBar\\NavBar.js",[],"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\FormPost\\FormNewPost.js",[],"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\listPosts\\ListPosts.js",[],"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\App\\App.js",[],"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\Modal\\Modal.js",[],"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\Post\\Post.js",[],"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\post\\Post.js",[],"C:\\Users\\nulltu\\Desktop\\alkemy\\blog-alkemy\\frontend\\src\\components\\formEditPost\\formEditPost.js",["54"],"import Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios'\r\nimport './formEditPost.css'\r\n\r\nexport default function FormEditPost(props) {\r\n\r\n    const [postGetById, setPostGetById] = useState({\r\n        title: '', body: ''\r\n    })\r\n\r\n    const paramsId = props.paramsId\r\n    useEffect(() => {\r\n        getPost()\r\n    }, [])\r\n\r\n    const getPost = async () => {\r\n        const response = await axios.get(`https://jsonplaceholder.typicode.com/posts/${paramsId}`)\r\n        const dataPostById = response.data\r\n        setPostGetById({\r\n            title: dataPostById.title,\r\n            body: dataPostById.body,\r\n            id: dataPostById.id\r\n         })\r\n    }\r\n\r\n\r\n    // const [posts, setPosts] = useState()\r\n\r\n    // const readInput = e => {\r\n    //     const textBox = e.target.name\r\n    //     const value = e.target.value\r\n    //     setDataPost({\r\n    //         ...dataPost,\r\n    //         [textBox]: value\r\n    //     })\r\n    // }\r\n\r\n    // const sendData = async (e) => {\r\n    //     e.preventDefault();\r\n    //     const response = await axios.post('https://jsonplaceholder.typicode.com/posts', dataPost)\r\n    //     console.log(response)\r\n    //     if(response.status === 201){\r\n    //         alert('User successfully created')\r\n    //         setDataPost({\r\n    //             username: '',\r\n    //             title: '', \r\n    //             body: ''\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Edit Post #{postGetById.id}\r\n        </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12} sm={12}>\r\n                            <TextField\r\n                                multiline\r\n                                name=\"title\"\r\n                                autoComplete=\"fname\"\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                label=\"Title\"\r\n                                autoFocus\r\n                                className={classes.input}\r\n                                value={postGetById.title}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <textarea\r\n                                name=\"body\"\r\n                                placeholder=\"Post\"\r\n                            //   onChange={readInput} \r\n                              value={postGetById.body}\r\n                            ></textarea>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        id=\"button__publish\"\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                    // onClick={sendData}\r\n                    >\r\n                        Publish\r\n          </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n        backgroundColor: '#F5B427'\r\n    },\r\n    input: {\r\n        color: 'red'\r\n    }\r\n}));",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":22,"column":8,"nodeType":"61","endLine":22,"endColumn":10,"suggestions":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPost'. Either include it or remove the dependency array.","ArrayExpression",["65"],"no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},"Update the dependencies array to be: [getPost]",{"range":"68","text":"69"},[711,713],"[getPost]"]